name: Continuous Integration
on:
  push:
    branches:
      - feature/github-workflow
  workflow_dispatch:
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  
jobs:
  start-ec2:
    runs-on: ubuntu-latest
    steps:
      - name: Check EC2 Instance State
        id: check-state
        run: |
          state=$(aws ec2 describe-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }} --query 'Reservations[*].Instances[*].State.Name' --output text)
          echo "Current state: $state"
          if [ "$state" = "stopped" ]; then
            echo "start=true" >> $GITHUB_ENV
          else
            echo "start=false" >> $GITHUB_ENV
          fi
          
      - name: Start EC2 Instance
        if: env.start == 'true'
        run: |
          aws ec2 start-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
          aws ec2 wait instance-running --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
          echo "Waiting for 45 seconds to ensure ec2 is running"
          sleep 45

  docker-build:
    runs-on: ubuntu-latest
    needs: [start-ec2]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker Image for ECR
        run: |
          docker build -t 818140567777.dkr.ecr.us-east-1.amazonaws.com/testrepo:new -f naming-server-service/Dockerfile .
          docker images  

      - name: Push the Docker Image
        run: |
          docker push 818140567777.dkr.ecr.us-east-1.amazonaws.com/testrepo:new

  stop-ec2:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: always()
    steps:
      - name: Stop EC2 Instance
        run: |
          aws ec2 stop-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
          aws ec2 wait instance-stopped --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
